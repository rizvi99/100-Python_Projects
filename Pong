#PONG GAME

from turtle import Screen, Turtle
import time

#Create Paddle

class Paddle(Turtle):
    def __init__(self, position):  #position is a tuple of coordinates
        super().__init__()
        self.shape('square') #default shape is 20x20
        self.color('white')
        self.shapesize(stretch_wid=5, stretch_len=1)
        self.penup()
        self.goto(position)
    def go_up(self):
        new_y = self.ycor() + 20
        self.goto(self.xcor(), new_y)
    
    def go_down(self):
        new_y = self.ycor() - 20
        self.goto(self.xcor(), new_y)
        
#Create the ball and make it move

class Ball(Turtle):
    def __init__(self):
        super().__init__()
        self.color('white')
        self.shape('circle')
        self.penup()
        self.x_move = 10
        self.y_move = 10
        self.ball_speed = 0.1
    
    def move(self):
        new_x = self.xcor() + self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x,new_y)
    
    def bounce_y(self):
        self.y_move *= -1 #When meet ceiling or floor, reverse direction
    
    def bounce_x(self):
        self.x_move *= -1 #When meet paddles/screen, reverse direction
        self.ball_speed *= 0.9 #Increase speed upon collision
        
    def reset_position(self):
        self.goto(0,0)
        self.ball_speed = 0.1
        self.bounce_x()
        
#Create Scoreboard

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.color('white')
        self.penup()
        self.hideturtle()
        #Attributes
        self.l_score = 0
        self.r_score =0
        self.update_scoreboard()
        
    def update_scoreboard(self):
        self.clear()
        self.goto(-100,200)
        self.write(self.l_score, align='center',
                   font=('Courier',80,'normal'))
        self.goto(100,200)
        self.write(self.r_score, align='center',
                   font=('Courier',80,'normal'))

    def l_point(self):
        self.l_score +=1
        self.update_scoreboard()

    def r_point(self):
        self.r_score +=1
        self.update_scoreboard()


#Create Screen

screen = Screen()
screen.bgcolor('black')
screen.setup(width=800, height=600)
screen.title('pong')

screen.tracer(0) #turn off animation

#_____________________________________#

#Game Runs

r_paddle = Paddle((350,0))
l_paddle = Paddle((-350,0))
ball = Ball()
scoreboard = Scoreboard()


    
screen.listen()
screen.onkey(r_paddle.go_up, 'Up')
screen.onkey(r_paddle.go_down, 'Down')
screen.onkey(l_paddle.go_up, 'w')
screen.onkey(l_paddle.go_down, 's')   


game_is_on = True
while game_is_on:
    time.sleep(ball.ball_speed)
    screen.update()
    ball.move()
    
    #Detect collision with y axis
    if ball.ycor() > 280 or ball.ycor() < -280: #Change the vertical 
        ball.bounce_y()
    
    #Detect with paddles 
    if ball.distance(r_paddle) < 50 and ball.xcor()>320 or\
    ball.distance(l_paddle) < 50 and ball.xcor()<-320: #change the horizontal
        ball.bounce_x()
        
    #Detect missing the right paddle
    if ball.xcor()>380:
        ball.reset_position()
        scoreboard.l_point()
        
    #Detect missing the left paddle
    if ball.xcor()<-380:
        ball.reset_position()
        scoreboard.r_point()
        
screen.exitonclick()
